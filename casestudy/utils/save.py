# =============================================
# üì¶ save.py ‚Äî L∆∞u d·ªØ li·ªáu CaseStudy v√†o MongoDB
# =============================================
import sys
import json
from pathlib import Path

import certifi
from pymongo import MongoClient

# -------------------------
# ‚öôÔ∏è C·∫•u h√¨nh MongoDB
# -------------------------
MONGO_URI = "mongodb+srv://nvt120205:thang1202@thangnguyen.8aiscbh.mongodb.net/"
DB_NAME = "case_study_db"

CASESTUDY_ROOT = Path(__file__).resolve().parents[1]
LOCAL_CASES_DIR = CASESTUDY_ROOT / "cases"


# -------------------------
# üíæ H√†m l∆∞u case
# -------------------------
def save_case(case_folder):
    """
    L∆∞u d·ªØ li·ªáu t·ª´ th∆∞ m·ª•c ch·ª©a context/personas/skeleton v√†o MongoDB.
    Tr·∫£ v·ªÅ tuple: (context, personas, skeleton)
    """
    try:
        data_dir = _resolve_data_dir(case_folder)
    except FileNotFoundError as exc:
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu trong th∆∞ m·ª•c '{case_folder}': {exc}")
        return None, None, None

    # K·∫øt n·ªëi MongoDB
    client = MongoClient(
            MONGO_URI,
            tls=True,
            tlsCAFile=certifi.where(),
        )
    db = client[DB_NAME]

    # ƒê·ªçc context.json
    with (data_dir / "context.json").open("r", encoding="utf-8") as f:
        context = json.load(f)
    case_id = context.get("case_id") or _infer_case_id(case_folder, data_dir)
    context["case_id"] = case_id

    # X√≥a d·ªØ li·ªáu c≈© tr∆∞·ªõc khi ghi
    db.contexts.delete_many({"case_id": case_id})
    db.personas.delete_many({"case_id": case_id})
    db.skeletons.delete_many({"case_id": case_id})

    # ƒê·ªçc personas.json
    personas_path = data_dir / "personas.json"
    with personas_path.open("r", encoding="utf-8") as f:
        personas_payload = json.load(f)
        personas = personas_payload["personas"] if isinstance(personas_payload, dict) else personas_payload
        for p in personas:
            p.pop("_id", None)
            p["case_id"] = case_id

    # ƒê·ªçc skeleton.json
    skeleton_path = data_dir / "skeleton.json"
    with skeleton_path.open("r", encoding="utf-8") as f:
        skeleton = json.load(f)
    skeleton.pop("_id", None)
    skeleton["case_id"] = case_id

    # Ghi v√†o MongoDB
    db.contexts.insert_one(context)
    db.personas.insert_many(personas)
    db.skeletons.insert_one(skeleton)

    print(f"‚úÖ ƒê√£ l∆∞u case '{case_id}' v√†o MongoDB th√†nh c√¥ng!")
    return context, personas, skeleton


# -------------------------
# üöÄ Ch·∫°y t·ª´ terminal
# -------------------------
if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("‚ùóC√°ch d√πng: python save.py <t√™n_folder_case>")
        print("üëâ V√≠ d·ª•: python save.py electric_shock_001")
    else:
        case_folder = sys.argv[1]
        save_case(case_folder)


def _resolve_data_dir(case_folder: str) -> Path:
    """
    Tr·∫£ v·ªÅ Path t·ªõi th∆∞ m·ª•c ch·ª©a context/personas/skeleton.
    H·ªó tr·ª£ truy·ªÅn tr·ª±c ti·∫øp ƒë∆∞·ªùng d·∫´n logic_memory ho·∫∑c th∆∞ m·ª•c case.
    """
    raw_path = Path(case_folder)
    candidates = []

    bases = {
        raw_path,
        LOCAL_CASES_DIR / raw_path,
        LOCAL_CASES_DIR / raw_path.name,
    }

    if not raw_path.is_absolute():
        bases.add((Path.cwd() / raw_path).resolve())
        bases.add((CASESTUDY_ROOT / raw_path).resolve())

    for base in bases:
        if not base.exists():
            continue
        for candidate in (base, base / "logic_memory"):
            if candidate.is_dir() and (candidate / "context.json").exists():
                return candidate.resolve()

    raise FileNotFoundError("Thi·∫øu context.json trong c√°c ƒë∆∞·ªùng d·∫´n d·ª± ph√≤ng.")


def _infer_case_id(original_input: str, data_dir: Path) -> str:
    """
    L·∫•y case_id t·ª´ context.json, fallback theo t√™n th∆∞ m·ª•c.
    """
    if data_dir.name != "logic_memory":
        return data_dir.name
    parent = data_dir.parent
    if parent and parent.name:
        return parent.name
    return Path(original_input).stem
